package com.android.systemui;

import android.app.INotificationManager;
import android.hardware.SensorPrivacyManager;
import android.hardware.display.NightDisplayListener;
import android.os.Handler;
import android.os.Looper;
import android.util.DisplayMetrics;
import android.view.IWindowManager;
import com.android.internal.logging.MetricsLogger;
import com.android.internal.statusbar.IStatusBarService;
import com.android.keyguard.clock.ClockManager;
import com.android.settingslib.bluetooth.LocalBluetoothManager;
import com.android.systemui.appops.AppOpsController;
import com.android.systemui.assist.AssistManager;
import com.android.systemui.bubbles.BubbleController;
import com.android.systemui.colorextraction.SysuiColorExtractor;
import com.android.systemui.dock.DockManager;
import com.android.systemui.fragments.FragmentService;
import com.android.systemui.keyguard.ScreenLifecycle;
import com.android.systemui.keyguard.WakefulnessLifecycle;
import com.android.systemui.plugins.ActivityStarter;
import com.android.systemui.plugins.DarkIconDispatcher;
import com.android.systemui.plugins.FalsingManager;
import com.android.systemui.plugins.PluginDependencyProvider;
import com.android.systemui.plugins.VolumeDialogController;
import com.android.systemui.plugins.statusbar.StatusBarStateController;
import com.android.systemui.power.EnhancedEstimates;
import com.android.systemui.power.PowerUI;
import com.android.systemui.recents.OverviewProxyService;
import com.android.systemui.shared.plugins.PluginManager;
import com.android.systemui.shared.system.ActivityManagerWrapper;
import com.android.systemui.shared.system.DevicePolicyManagerWrapper;
import com.android.systemui.shared.system.PackageManagerWrapper;
import com.android.systemui.statusbar.NavigationBarController;
import com.android.systemui.statusbar.NotificationListener;
import com.android.systemui.statusbar.NotificationLockscreenUserManager;
import com.android.systemui.statusbar.NotificationMediaManager;
import com.android.systemui.statusbar.NotificationRemoteInputManager;
import com.android.systemui.statusbar.NotificationViewHierarchyManager;
import com.android.systemui.statusbar.SmartReplyController;
import com.android.systemui.statusbar.VibratorHelper;
import com.android.systemui.statusbar.notification.NotificationAlertingManager;
import com.android.systemui.statusbar.notification.NotificationEntryManager;
import com.android.systemui.statusbar.notification.NotificationFilter;
import com.android.systemui.statusbar.notification.NotificationInterruptionStateProvider;
import com.android.systemui.statusbar.notification.VisualStabilityManager;
import com.android.systemui.statusbar.notification.collection.NotificationData;
import com.android.systemui.statusbar.notification.logging.NotificationLogger;
import com.android.systemui.statusbar.notification.row.ChannelEditorDialogController;
import com.android.systemui.statusbar.notification.row.NotificationBlockingHelperManager;
import com.android.systemui.statusbar.notification.row.NotificationGutsManager;
import com.android.systemui.statusbar.phone.AutoHideController;
import com.android.systemui.statusbar.phone.KeyguardDismissUtil;
import com.android.systemui.statusbar.phone.LightBarController;
import com.android.systemui.statusbar.phone.LockscreenGestureLogger;
import com.android.systemui.statusbar.phone.ManagedProfileController;
import com.android.systemui.statusbar.phone.NavigationModeController;
import com.android.systemui.statusbar.phone.NotificationGroupAlertTransferHelper;
import com.android.systemui.statusbar.phone.NotificationGroupManager;
import com.android.systemui.statusbar.phone.ShadeController;
import com.android.systemui.statusbar.phone.StatusBarIconController;
import com.android.systemui.statusbar.phone.StatusBarWindowController;
import com.android.systemui.statusbar.policy.AccessibilityController;
import com.android.systemui.statusbar.policy.AccessibilityManagerWrapper;
import com.android.systemui.statusbar.policy.BatteryController;
import com.android.systemui.statusbar.policy.BluetoothController;
import com.android.systemui.statusbar.policy.CastController;
import com.android.systemui.statusbar.policy.ConfigurationController;
import com.android.systemui.statusbar.policy.DataSaverController;
import com.android.systemui.statusbar.policy.DeviceProvisionedController;
import com.android.systemui.statusbar.policy.ExtensionController;
import com.android.systemui.statusbar.policy.FlashlightController;
import com.android.systemui.statusbar.policy.HotspotController;
import com.android.systemui.statusbar.policy.KeyguardMonitor;
import com.android.systemui.statusbar.policy.LocationController;
import com.android.systemui.statusbar.policy.NetworkController;
import com.android.systemui.statusbar.policy.NextAlarmController;
import com.android.systemui.statusbar.policy.RemoteInputQuickSettingsDisabler;
import com.android.systemui.statusbar.policy.RotationLockController;
import com.android.systemui.statusbar.policy.SecurityController;
import com.android.systemui.statusbar.policy.SensorPrivacyController;
import com.android.systemui.statusbar.policy.SmartReplyConstants;
import com.android.systemui.statusbar.policy.UserInfoController;
import com.android.systemui.statusbar.policy.UserSwitcherController;
import com.android.systemui.statusbar.policy.ZenModeController;
import com.android.systemui.tuner.TunablePadding;
import com.android.systemui.tuner.TunerService;
import com.android.systemui.util.AsyncSensorManager;
import com.android.systemui.util.leak.GarbageMonitor;
import com.android.systemui.util.leak.LeakDetector;
import com.android.systemui.util.leak.LeakReporter;
import dagger.internal.DoubleCheck;
import dagger.internal.Factory;
import javax.inject.Provider;
/* loaded from: classes21.dex */
public final class Dependency_Factory implements Factory<Dependency> {
    private final Provider<AccessibilityController> mAccessibilityControllerProvider;
    private final Provider<AccessibilityManagerWrapper> mAccessibilityManagerWrapperProvider;
    private final Provider<ActivityManagerWrapper> mActivityManagerWrapperProvider;
    private final Provider<ActivityStarterDelegate> mActivityStarterDelegateProvider;
    private final Provider<ActivityStarter> mActivityStarterProvider;
    private final Provider<AppOpsController> mAppOpsControllerProvider;
    private final Provider<AssistManager> mAssistManagerProvider;
    private final Provider<AsyncSensorManager> mAsyncSensorManagerProvider;
    private final Provider<AutoHideController> mAutoHideControllerProvider;
    private final Provider<BatteryController> mBatteryControllerProvider;
    private final Provider<Handler> mBgHandlerProvider;
    private final Provider<Looper> mBgLooperProvider;
    private final Provider<BluetoothController> mBluetoothControllerProvider;
    private final Provider<BubbleController> mBubbleControllerProvider;
    private final Provider<CastController> mCastControllerProvider;
    private final Provider<ChannelEditorDialogController> mChannelEditorDialogControllerProvider;
    private final Provider<ClockManager> mClockManagerProvider;
    private final Provider<ConfigurationController> mConfigurationControllerProvider;
    private final Provider<DarkIconDispatcher> mDarkIconDispatcherProvider;
    private final Provider<DataSaverController> mDataSaverControllerProvider;
    private final Provider<DevicePolicyManagerWrapper> mDevicePolicyManagerWrapperProvider;
    private final Provider<DeviceProvisionedController> mDeviceProvisionedControllerProvider;
    private final Provider<DisplayMetrics> mDisplayMetricsProvider;
    private final Provider<DockManager> mDockManagerProvider;
    private final Provider<DumpController> mDumpControllerProvider;
    private final Provider<EnhancedEstimates> mEnhancedEstimatesProvider;
    private final Provider<ExtensionController> mExtensionControllerProvider;
    private final Provider<FalsingManager> mFalsingManagerProvider;
    private final Provider<FlashlightController> mFlashlightControllerProvider;
    private final Provider<ForegroundServiceController> mForegroundServiceControllerProvider;
    private final Provider<ForegroundServiceNotificationListener> mForegroundServiceNotificationListenerProvider;
    private final Provider<FragmentService> mFragmentServiceProvider;
    private final Provider<GarbageMonitor> mGarbageMonitorProvider;
    private final Provider<HotspotController> mHotspotControllerProvider;
    private final Provider<INotificationManager> mINotificationManagerProvider;
    private final Provider<IStatusBarService> mIStatusBarServiceProvider;
    private final Provider<IWindowManager> mIWindowManagerProvider;
    private final Provider<InitController> mInitControllerProvider;
    private final Provider<KeyguardDismissUtil> mKeyguardDismissUtilProvider;
    private final Provider<NotificationData.KeyguardEnvironment> mKeyguardEnvironmentProvider;
    private final Provider<KeyguardMonitor> mKeyguardMonitorProvider;
    private final Provider<LeakDetector> mLeakDetectorProvider;
    private final Provider<String> mLeakReportEmailProvider;
    private final Provider<LeakReporter> mLeakReporterProvider;
    private final Provider<LightBarController> mLightBarControllerProvider;
    private final Provider<LocalBluetoothManager> mLocalBluetoothManagerProvider;
    private final Provider<LocationController> mLocationControllerProvider;
    private final Provider<LockscreenGestureLogger> mLockscreenGestureLoggerProvider;
    private final Provider<Handler> mMainHandlerProvider;
    private final Provider<ManagedProfileController> mManagedProfileControllerProvider;
    private final Provider<MetricsLogger> mMetricsLoggerProvider;
    private final Provider<NavigationModeController> mNavBarModeControllerProvider;
    private final Provider<NavigationBarController> mNavigationBarControllerProvider;
    private final Provider<NetworkController> mNetworkControllerProvider;
    private final Provider<NextAlarmController> mNextAlarmControllerProvider;
    private final Provider<NightDisplayListener> mNightDisplayListenerProvider;
    private final Provider<NotificationAlertingManager> mNotificationAlertingManagerProvider;
    private final Provider<NotificationBlockingHelperManager> mNotificationBlockingHelperManagerProvider;
    private final Provider<NotificationEntryManager> mNotificationEntryManagerProvider;
    private final Provider<NotificationFilter> mNotificationFilterProvider;
    private final Provider<NotificationGroupAlertTransferHelper> mNotificationGroupAlertTransferHelperProvider;
    private final Provider<NotificationGroupManager> mNotificationGroupManagerProvider;
    private final Provider<NotificationGutsManager> mNotificationGutsManagerProvider;
    private final Provider<NotificationInterruptionStateProvider> mNotificationInterruptionStateProvider;
    private final Provider<NotificationListener> mNotificationListenerProvider;
    private final Provider<NotificationLockscreenUserManager> mNotificationLockscreenUserManagerProvider;
    private final Provider<NotificationLogger> mNotificationLoggerProvider;
    private final Provider<NotificationMediaManager> mNotificationMediaManagerProvider;
    private final Provider<NotificationRemoteInputManager.Callback> mNotificationRemoteInputManagerCallbackProvider;
    private final Provider<NotificationRemoteInputManager> mNotificationRemoteInputManagerProvider;
    private final Provider<NotificationViewHierarchyManager> mNotificationViewHierarchyManagerProvider;
    private final Provider<OverviewProxyService> mOverviewProxyServiceProvider;
    private final Provider<PackageManagerWrapper> mPackageManagerWrapperProvider;
    private final Provider<PluginDependencyProvider> mPluginDependencyProvider;
    private final Provider<PluginManager> mPluginManagerProvider;
    private final Provider<RemoteInputQuickSettingsDisabler> mRemoteInputQuickSettingsDisablerProvider;
    private final Provider<RotationLockController> mRotationLockControllerProvider;
    private final Provider<ScreenLifecycle> mScreenLifecycleProvider;
    private final Provider<SecurityController> mSecurityControllerProvider;
    private final Provider<SensorPrivacyController> mSensorPrivacyControllerProvider;
    private final Provider<SensorPrivacyManager> mSensorPrivacyManagerProvider;
    private final Provider<ShadeController> mShadeControllerProvider;
    private final Provider<SmartReplyConstants> mSmartReplyConstantsProvider;
    private final Provider<SmartReplyController> mSmartReplyControllerProvider;
    private final Provider<StatusBarIconController> mStatusBarIconControllerProvider;
    private final Provider<StatusBarStateController> mStatusBarStateControllerProvider;
    private final Provider<StatusBarWindowController> mStatusBarWindowControllerProvider;
    private final Provider<SysuiColorExtractor> mSysuiColorExtractorProvider;
    private final Provider<Handler> mTimeTickHandlerProvider;
    private final Provider<TunablePadding.TunablePaddingService> mTunablePaddingServiceProvider;
    private final Provider<TunerService> mTunerServiceProvider;
    private final Provider<UiOffloadThread> mUiOffloadThreadProvider;
    private final Provider<UserInfoController> mUserInfoControllerProvider;
    private final Provider<UserSwitcherController> mUserSwitcherControllerProvider;
    private final Provider<VibratorHelper> mVibratorHelperProvider;
    private final Provider<VisualStabilityManager> mVisualStabilityManagerProvider;
    private final Provider<VolumeDialogController> mVolumeDialogControllerProvider;
    private final Provider<WakefulnessLifecycle> mWakefulnessLifecycleProvider;
    private final Provider<PowerUI.WarningsUI> mWarningsUIProvider;
    private final Provider<ZenModeController> mZenModeControllerProvider;

    public Dependency_Factory(Provider<ActivityStarter> mActivityStarterProvider, Provider<ActivityStarterDelegate> mActivityStarterDelegateProvider, Provider<AsyncSensorManager> mAsyncSensorManagerProvider, Provider<BluetoothController> mBluetoothControllerProvider, Provider<LocationController> mLocationControllerProvider, Provider<RotationLockController> mRotationLockControllerProvider, Provider<NetworkController> mNetworkControllerProvider, Provider<ZenModeController> mZenModeControllerProvider, Provider<HotspotController> mHotspotControllerProvider, Provider<CastController> mCastControllerProvider, Provider<FlashlightController> mFlashlightControllerProvider, Provider<UserSwitcherController> mUserSwitcherControllerProvider, Provider<UserInfoController> mUserInfoControllerProvider, Provider<KeyguardMonitor> mKeyguardMonitorProvider, Provider<BatteryController> mBatteryControllerProvider, Provider<NightDisplayListener> mNightDisplayListenerProvider, Provider<ManagedProfileController> mManagedProfileControllerProvider, Provider<NextAlarmController> mNextAlarmControllerProvider, Provider<DataSaverController> mDataSaverControllerProvider, Provider<AccessibilityController> mAccessibilityControllerProvider, Provider<DeviceProvisionedController> mDeviceProvisionedControllerProvider, Provider<PluginManager> mPluginManagerProvider, Provider<AssistManager> mAssistManagerProvider, Provider<SecurityController> mSecurityControllerProvider, Provider<LeakDetector> mLeakDetectorProvider, Provider<LeakReporter> mLeakReporterProvider, Provider<GarbageMonitor> mGarbageMonitorProvider, Provider<TunerService> mTunerServiceProvider, Provider<StatusBarWindowController> mStatusBarWindowControllerProvider, Provider<DarkIconDispatcher> mDarkIconDispatcherProvider, Provider<ConfigurationController> mConfigurationControllerProvider, Provider<StatusBarIconController> mStatusBarIconControllerProvider, Provider<ScreenLifecycle> mScreenLifecycleProvider, Provider<WakefulnessLifecycle> mWakefulnessLifecycleProvider, Provider<FragmentService> mFragmentServiceProvider, Provider<ExtensionController> mExtensionControllerProvider, Provider<PluginDependencyProvider> mPluginDependencyProvider, Provider<LocalBluetoothManager> mLocalBluetoothManagerProvider, Provider<VolumeDialogController> mVolumeDialogControllerProvider, Provider<MetricsLogger> mMetricsLoggerProvider, Provider<AccessibilityManagerWrapper> mAccessibilityManagerWrapperProvider, Provider<SysuiColorExtractor> mSysuiColorExtractorProvider, Provider<TunablePadding.TunablePaddingService> mTunablePaddingServiceProvider, Provider<ForegroundServiceController> mForegroundServiceControllerProvider, Provider<UiOffloadThread> mUiOffloadThreadProvider, Provider<PowerUI.WarningsUI> mWarningsUIProvider, Provider<LightBarController> mLightBarControllerProvider, Provider<IWindowManager> mIWindowManagerProvider, Provider<OverviewProxyService> mOverviewProxyServiceProvider, Provider<NavigationModeController> mNavBarModeControllerProvider, Provider<EnhancedEstimates> mEnhancedEstimatesProvider, Provider<VibratorHelper> mVibratorHelperProvider, Provider<IStatusBarService> mIStatusBarServiceProvider, Provider<DisplayMetrics> mDisplayMetricsProvider, Provider<LockscreenGestureLogger> mLockscreenGestureLoggerProvider, Provider<NotificationData.KeyguardEnvironment> mKeyguardEnvironmentProvider, Provider<ShadeController> mShadeControllerProvider, Provider<NotificationRemoteInputManager.Callback> mNotificationRemoteInputManagerCallbackProvider, Provider<InitController> mInitControllerProvider, Provider<AppOpsController> mAppOpsControllerProvider, Provider<NavigationBarController> mNavigationBarControllerProvider, Provider<StatusBarStateController> mStatusBarStateControllerProvider, Provider<NotificationLockscreenUserManager> mNotificationLockscreenUserManagerProvider, Provider<NotificationGroupAlertTransferHelper> mNotificationGroupAlertTransferHelperProvider, Provider<NotificationGroupManager> mNotificationGroupManagerProvider, Provider<VisualStabilityManager> mVisualStabilityManagerProvider, Provider<NotificationGutsManager> mNotificationGutsManagerProvider, Provider<NotificationMediaManager> mNotificationMediaManagerProvider, Provider<NotificationBlockingHelperManager> mNotificationBlockingHelperManagerProvider, Provider<NotificationRemoteInputManager> mNotificationRemoteInputManagerProvider, Provider<SmartReplyConstants> mSmartReplyConstantsProvider, Provider<NotificationListener> mNotificationListenerProvider, Provider<NotificationLogger> mNotificationLoggerProvider, Provider<NotificationViewHierarchyManager> mNotificationViewHierarchyManagerProvider, Provider<NotificationFilter> mNotificationFilterProvider, Provider<NotificationInterruptionStateProvider> mNotificationInterruptionStateProvider, Provider<KeyguardDismissUtil> mKeyguardDismissUtilProvider, Provider<SmartReplyController> mSmartReplyControllerProvider, Provider<RemoteInputQuickSettingsDisabler> mRemoteInputQuickSettingsDisablerProvider, Provider<BubbleController> mBubbleControllerProvider, Provider<NotificationEntryManager> mNotificationEntryManagerProvider, Provider<NotificationAlertingManager> mNotificationAlertingManagerProvider, Provider<SensorPrivacyManager> mSensorPrivacyManagerProvider, Provider<AutoHideController> mAutoHideControllerProvider, Provider<ForegroundServiceNotificationListener> mForegroundServiceNotificationListenerProvider, Provider<Looper> mBgLooperProvider, Provider<Handler> mBgHandlerProvider, Provider<Handler> mMainHandlerProvider, Provider<Handler> mTimeTickHandlerProvider, Provider<String> mLeakReportEmailProvider, Provider<ClockManager> mClockManagerProvider, Provider<ActivityManagerWrapper> mActivityManagerWrapperProvider, Provider<DevicePolicyManagerWrapper> mDevicePolicyManagerWrapperProvider, Provider<PackageManagerWrapper> mPackageManagerWrapperProvider, Provider<SensorPrivacyController> mSensorPrivacyControllerProvider, Provider<DumpController> mDumpControllerProvider, Provider<DockManager> mDockManagerProvider, Provider<ChannelEditorDialogController> mChannelEditorDialogControllerProvider, Provider<INotificationManager> mINotificationManagerProvider, Provider<FalsingManager> mFalsingManagerProvider) {
        this.mActivityStarterProvider = mActivityStarterProvider;
        this.mActivityStarterDelegateProvider = mActivityStarterDelegateProvider;
        this.mAsyncSensorManagerProvider = mAsyncSensorManagerProvider;
        this.mBluetoothControllerProvider = mBluetoothControllerProvider;
        this.mLocationControllerProvider = mLocationControllerProvider;
        this.mRotationLockControllerProvider = mRotationLockControllerProvider;
        this.mNetworkControllerProvider = mNetworkControllerProvider;
        this.mZenModeControllerProvider = mZenModeControllerProvider;
        this.mHotspotControllerProvider = mHotspotControllerProvider;
        this.mCastControllerProvider = mCastControllerProvider;
        this.mFlashlightControllerProvider = mFlashlightControllerProvider;
        this.mUserSwitcherControllerProvider = mUserSwitcherControllerProvider;
        this.mUserInfoControllerProvider = mUserInfoControllerProvider;
        this.mKeyguardMonitorProvider = mKeyguardMonitorProvider;
        this.mBatteryControllerProvider = mBatteryControllerProvider;
        this.mNightDisplayListenerProvider = mNightDisplayListenerProvider;
        this.mManagedProfileControllerProvider = mManagedProfileControllerProvider;
        this.mNextAlarmControllerProvider = mNextAlarmControllerProvider;
        this.mDataSaverControllerProvider = mDataSaverControllerProvider;
        this.mAccessibilityControllerProvider = mAccessibilityControllerProvider;
        this.mDeviceProvisionedControllerProvider = mDeviceProvisionedControllerProvider;
        this.mPluginManagerProvider = mPluginManagerProvider;
        this.mAssistManagerProvider = mAssistManagerProvider;
        this.mSecurityControllerProvider = mSecurityControllerProvider;
        this.mLeakDetectorProvider = mLeakDetectorProvider;
        this.mLeakReporterProvider = mLeakReporterProvider;
        this.mGarbageMonitorProvider = mGarbageMonitorProvider;
        this.mTunerServiceProvider = mTunerServiceProvider;
        this.mStatusBarWindowControllerProvider = mStatusBarWindowControllerProvider;
        this.mDarkIconDispatcherProvider = mDarkIconDispatcherProvider;
        this.mConfigurationControllerProvider = mConfigurationControllerProvider;
        this.mStatusBarIconControllerProvider = mStatusBarIconControllerProvider;
        this.mScreenLifecycleProvider = mScreenLifecycleProvider;
        this.mWakefulnessLifecycleProvider = mWakefulnessLifecycleProvider;
        this.mFragmentServiceProvider = mFragmentServiceProvider;
        this.mExtensionControllerProvider = mExtensionControllerProvider;
        this.mPluginDependencyProvider = mPluginDependencyProvider;
        this.mLocalBluetoothManagerProvider = mLocalBluetoothManagerProvider;
        this.mVolumeDialogControllerProvider = mVolumeDialogControllerProvider;
        this.mMetricsLoggerProvider = mMetricsLoggerProvider;
        this.mAccessibilityManagerWrapperProvider = mAccessibilityManagerWrapperProvider;
        this.mSysuiColorExtractorProvider = mSysuiColorExtractorProvider;
        this.mTunablePaddingServiceProvider = mTunablePaddingServiceProvider;
        this.mForegroundServiceControllerProvider = mForegroundServiceControllerProvider;
        this.mUiOffloadThreadProvider = mUiOffloadThreadProvider;
        this.mWarningsUIProvider = mWarningsUIProvider;
        this.mLightBarControllerProvider = mLightBarControllerProvider;
        this.mIWindowManagerProvider = mIWindowManagerProvider;
        this.mOverviewProxyServiceProvider = mOverviewProxyServiceProvider;
        this.mNavBarModeControllerProvider = mNavBarModeControllerProvider;
        this.mEnhancedEstimatesProvider = mEnhancedEstimatesProvider;
        this.mVibratorHelperProvider = mVibratorHelperProvider;
        this.mIStatusBarServiceProvider = mIStatusBarServiceProvider;
        this.mDisplayMetricsProvider = mDisplayMetricsProvider;
        this.mLockscreenGestureLoggerProvider = mLockscreenGestureLoggerProvider;
        this.mKeyguardEnvironmentProvider = mKeyguardEnvironmentProvider;
        this.mShadeControllerProvider = mShadeControllerProvider;
        this.mNotificationRemoteInputManagerCallbackProvider = mNotificationRemoteInputManagerCallbackProvider;
        this.mInitControllerProvider = mInitControllerProvider;
        this.mAppOpsControllerProvider = mAppOpsControllerProvider;
        this.mNavigationBarControllerProvider = mNavigationBarControllerProvider;
        this.mStatusBarStateControllerProvider = mStatusBarStateControllerProvider;
        this.mNotificationLockscreenUserManagerProvider = mNotificationLockscreenUserManagerProvider;
        this.mNotificationGroupAlertTransferHelperProvider = mNotificationGroupAlertTransferHelperProvider;
        this.mNotificationGroupManagerProvider = mNotificationGroupManagerProvider;
        this.mVisualStabilityManagerProvider = mVisualStabilityManagerProvider;
        this.mNotificationGutsManagerProvider = mNotificationGutsManagerProvider;
        this.mNotificationMediaManagerProvider = mNotificationMediaManagerProvider;
        this.mNotificationBlockingHelperManagerProvider = mNotificationBlockingHelperManagerProvider;
        this.mNotificationRemoteInputManagerProvider = mNotificationRemoteInputManagerProvider;
        this.mSmartReplyConstantsProvider = mSmartReplyConstantsProvider;
        this.mNotificationListenerProvider = mNotificationListenerProvider;
        this.mNotificationLoggerProvider = mNotificationLoggerProvider;
        this.mNotificationViewHierarchyManagerProvider = mNotificationViewHierarchyManagerProvider;
        this.mNotificationFilterProvider = mNotificationFilterProvider;
        this.mNotificationInterruptionStateProvider = mNotificationInterruptionStateProvider;
        this.mKeyguardDismissUtilProvider = mKeyguardDismissUtilProvider;
        this.mSmartReplyControllerProvider = mSmartReplyControllerProvider;
        this.mRemoteInputQuickSettingsDisablerProvider = mRemoteInputQuickSettingsDisablerProvider;
        this.mBubbleControllerProvider = mBubbleControllerProvider;
        this.mNotificationEntryManagerProvider = mNotificationEntryManagerProvider;
        this.mNotificationAlertingManagerProvider = mNotificationAlertingManagerProvider;
        this.mSensorPrivacyManagerProvider = mSensorPrivacyManagerProvider;
        this.mAutoHideControllerProvider = mAutoHideControllerProvider;
        this.mForegroundServiceNotificationListenerProvider = mForegroundServiceNotificationListenerProvider;
        this.mBgLooperProvider = mBgLooperProvider;
        this.mBgHandlerProvider = mBgHandlerProvider;
        this.mMainHandlerProvider = mMainHandlerProvider;
        this.mTimeTickHandlerProvider = mTimeTickHandlerProvider;
        this.mLeakReportEmailProvider = mLeakReportEmailProvider;
        this.mClockManagerProvider = mClockManagerProvider;
        this.mActivityManagerWrapperProvider = mActivityManagerWrapperProvider;
        this.mDevicePolicyManagerWrapperProvider = mDevicePolicyManagerWrapperProvider;
        this.mPackageManagerWrapperProvider = mPackageManagerWrapperProvider;
        this.mSensorPrivacyControllerProvider = mSensorPrivacyControllerProvider;
        this.mDumpControllerProvider = mDumpControllerProvider;
        this.mDockManagerProvider = mDockManagerProvider;
        this.mChannelEditorDialogControllerProvider = mChannelEditorDialogControllerProvider;
        this.mINotificationManagerProvider = mINotificationManagerProvider;
        this.mFalsingManagerProvider = mFalsingManagerProvider;
    }

    @Override // javax.inject.Provider
    public Dependency get() {
        return provideInstance(this.mActivityStarterProvider, this.mActivityStarterDelegateProvider, this.mAsyncSensorManagerProvider, this.mBluetoothControllerProvider, this.mLocationControllerProvider, this.mRotationLockControllerProvider, this.mNetworkControllerProvider, this.mZenModeControllerProvider, this.mHotspotControllerProvider, this.mCastControllerProvider, this.mFlashlightControllerProvider, this.mUserSwitcherControllerProvider, this.mUserInfoControllerProvider, this.mKeyguardMonitorProvider, this.mBatteryControllerProvider, this.mNightDisplayListenerProvider, this.mManagedProfileControllerProvider, this.mNextAlarmControllerProvider, this.mDataSaverControllerProvider, this.mAccessibilityControllerProvider, this.mDeviceProvisionedControllerProvider, this.mPluginManagerProvider, this.mAssistManagerProvider, this.mSecurityControllerProvider, this.mLeakDetectorProvider, this.mLeakReporterProvider, this.mGarbageMonitorProvider, this.mTunerServiceProvider, this.mStatusBarWindowControllerProvider, this.mDarkIconDispatcherProvider, this.mConfigurationControllerProvider, this.mStatusBarIconControllerProvider, this.mScreenLifecycleProvider, this.mWakefulnessLifecycleProvider, this.mFragmentServiceProvider, this.mExtensionControllerProvider, this.mPluginDependencyProvider, this.mLocalBluetoothManagerProvider, this.mVolumeDialogControllerProvider, this.mMetricsLoggerProvider, this.mAccessibilityManagerWrapperProvider, this.mSysuiColorExtractorProvider, this.mTunablePaddingServiceProvider, this.mForegroundServiceControllerProvider, this.mUiOffloadThreadProvider, this.mWarningsUIProvider, this.mLightBarControllerProvider, this.mIWindowManagerProvider, this.mOverviewProxyServiceProvider, this.mNavBarModeControllerProvider, this.mEnhancedEstimatesProvider, this.mVibratorHelperProvider, this.mIStatusBarServiceProvider, this.mDisplayMetricsProvider, this.mLockscreenGestureLoggerProvider, this.mKeyguardEnvironmentProvider, this.mShadeControllerProvider, this.mNotificationRemoteInputManagerCallbackProvider, this.mInitControllerProvider, this.mAppOpsControllerProvider, this.mNavigationBarControllerProvider, this.mStatusBarStateControllerProvider, this.mNotificationLockscreenUserManagerProvider, this.mNotificationGroupAlertTransferHelperProvider, this.mNotificationGroupManagerProvider, this.mVisualStabilityManagerProvider, this.mNotificationGutsManagerProvider, this.mNotificationMediaManagerProvider, this.mNotificationBlockingHelperManagerProvider, this.mNotificationRemoteInputManagerProvider, this.mSmartReplyConstantsProvider, this.mNotificationListenerProvider, this.mNotificationLoggerProvider, this.mNotificationViewHierarchyManagerProvider, this.mNotificationFilterProvider, this.mNotificationInterruptionStateProvider, this.mKeyguardDismissUtilProvider, this.mSmartReplyControllerProvider, this.mRemoteInputQuickSettingsDisablerProvider, this.mBubbleControllerProvider, this.mNotificationEntryManagerProvider, this.mNotificationAlertingManagerProvider, this.mSensorPrivacyManagerProvider, this.mAutoHideControllerProvider, this.mForegroundServiceNotificationListenerProvider, this.mBgLooperProvider, this.mBgHandlerProvider, this.mMainHandlerProvider, this.mTimeTickHandlerProvider, this.mLeakReportEmailProvider, this.mClockManagerProvider, this.mActivityManagerWrapperProvider, this.mDevicePolicyManagerWrapperProvider, this.mPackageManagerWrapperProvider, this.mSensorPrivacyControllerProvider, this.mDumpControllerProvider, this.mDockManagerProvider, this.mChannelEditorDialogControllerProvider, this.mINotificationManagerProvider, this.mFalsingManagerProvider);
    }

    public static Dependency provideInstance(Provider<ActivityStarter> mActivityStarterProvider, Provider<ActivityStarterDelegate> mActivityStarterDelegateProvider, Provider<AsyncSensorManager> mAsyncSensorManagerProvider, Provider<BluetoothController> mBluetoothControllerProvider, Provider<LocationController> mLocationControllerProvider, Provider<RotationLockController> mRotationLockControllerProvider, Provider<NetworkController> mNetworkControllerProvider, Provider<ZenModeController> mZenModeControllerProvider, Provider<HotspotController> mHotspotControllerProvider, Provider<CastController> mCastControllerProvider, Provider<FlashlightController> mFlashlightControllerProvider, Provider<UserSwitcherController> mUserSwitcherControllerProvider, Provider<UserInfoController> mUserInfoControllerProvider, Provider<KeyguardMonitor> mKeyguardMonitorProvider, Provider<BatteryController> mBatteryControllerProvider, Provider<NightDisplayListener> mNightDisplayListenerProvider, Provider<ManagedProfileController> mManagedProfileControllerProvider, Provider<NextAlarmController> mNextAlarmControllerProvider, Provider<DataSaverController> mDataSaverControllerProvider, Provider<AccessibilityController> mAccessibilityControllerProvider, Provider<DeviceProvisionedController> mDeviceProvisionedControllerProvider, Provider<PluginManager> mPluginManagerProvider, Provider<AssistManager> mAssistManagerProvider, Provider<SecurityController> mSecurityControllerProvider, Provider<LeakDetector> mLeakDetectorProvider, Provider<LeakReporter> mLeakReporterProvider, Provider<GarbageMonitor> mGarbageMonitorProvider, Provider<TunerService> mTunerServiceProvider, Provider<StatusBarWindowController> mStatusBarWindowControllerProvider, Provider<DarkIconDispatcher> mDarkIconDispatcherProvider, Provider<ConfigurationController> mConfigurationControllerProvider, Provider<StatusBarIconController> mStatusBarIconControllerProvider, Provider<ScreenLifecycle> mScreenLifecycleProvider, Provider<WakefulnessLifecycle> mWakefulnessLifecycleProvider, Provider<FragmentService> mFragmentServiceProvider, Provider<ExtensionController> mExtensionControllerProvider, Provider<PluginDependencyProvider> mPluginDependencyProvider, Provider<LocalBluetoothManager> mLocalBluetoothManagerProvider, Provider<VolumeDialogController> mVolumeDialogControllerProvider, Provider<MetricsLogger> mMetricsLoggerProvider, Provider<AccessibilityManagerWrapper> mAccessibilityManagerWrapperProvider, Provider<SysuiColorExtractor> mSysuiColorExtractorProvider, Provider<TunablePadding.TunablePaddingService> mTunablePaddingServiceProvider, Provider<ForegroundServiceController> mForegroundServiceControllerProvider, Provider<UiOffloadThread> mUiOffloadThreadProvider, Provider<PowerUI.WarningsUI> mWarningsUIProvider, Provider<LightBarController> mLightBarControllerProvider, Provider<IWindowManager> mIWindowManagerProvider, Provider<OverviewProxyService> mOverviewProxyServiceProvider, Provider<NavigationModeController> mNavBarModeControllerProvider, Provider<EnhancedEstimates> mEnhancedEstimatesProvider, Provider<VibratorHelper> mVibratorHelperProvider, Provider<IStatusBarService> mIStatusBarServiceProvider, Provider<DisplayMetrics> mDisplayMetricsProvider, Provider<LockscreenGestureLogger> mLockscreenGestureLoggerProvider, Provider<NotificationData.KeyguardEnvironment> mKeyguardEnvironmentProvider, Provider<ShadeController> mShadeControllerProvider, Provider<NotificationRemoteInputManager.Callback> mNotificationRemoteInputManagerCallbackProvider, Provider<InitController> mInitControllerProvider, Provider<AppOpsController> mAppOpsControllerProvider, Provider<NavigationBarController> mNavigationBarControllerProvider, Provider<StatusBarStateController> mStatusBarStateControllerProvider, Provider<NotificationLockscreenUserManager> mNotificationLockscreenUserManagerProvider, Provider<NotificationGroupAlertTransferHelper> mNotificationGroupAlertTransferHelperProvider, Provider<NotificationGroupManager> mNotificationGroupManagerProvider, Provider<VisualStabilityManager> mVisualStabilityManagerProvider, Provider<NotificationGutsManager> mNotificationGutsManagerProvider, Provider<NotificationMediaManager> mNotificationMediaManagerProvider, Provider<NotificationBlockingHelperManager> mNotificationBlockingHelperManagerProvider, Provider<NotificationRemoteInputManager> mNotificationRemoteInputManagerProvider, Provider<SmartReplyConstants> mSmartReplyConstantsProvider, Provider<NotificationListener> mNotificationListenerProvider, Provider<NotificationLogger> mNotificationLoggerProvider, Provider<NotificationViewHierarchyManager> mNotificationViewHierarchyManagerProvider, Provider<NotificationFilter> mNotificationFilterProvider, Provider<NotificationInterruptionStateProvider> mNotificationInterruptionStateProvider, Provider<KeyguardDismissUtil> mKeyguardDismissUtilProvider, Provider<SmartReplyController> mSmartReplyControllerProvider, Provider<RemoteInputQuickSettingsDisabler> mRemoteInputQuickSettingsDisablerProvider, Provider<BubbleController> mBubbleControllerProvider, Provider<NotificationEntryManager> mNotificationEntryManagerProvider, Provider<NotificationAlertingManager> mNotificationAlertingManagerProvider, Provider<SensorPrivacyManager> mSensorPrivacyManagerProvider, Provider<AutoHideController> mAutoHideControllerProvider, Provider<ForegroundServiceNotificationListener> mForegroundServiceNotificationListenerProvider, Provider<Looper> mBgLooperProvider, Provider<Handler> mBgHandlerProvider, Provider<Handler> mMainHandlerProvider, Provider<Handler> mTimeTickHandlerProvider, Provider<String> mLeakReportEmailProvider, Provider<ClockManager> mClockManagerProvider, Provider<ActivityManagerWrapper> mActivityManagerWrapperProvider, Provider<DevicePolicyManagerWrapper> mDevicePolicyManagerWrapperProvider, Provider<PackageManagerWrapper> mPackageManagerWrapperProvider, Provider<SensorPrivacyController> mSensorPrivacyControllerProvider, Provider<DumpController> mDumpControllerProvider, Provider<DockManager> mDockManagerProvider, Provider<ChannelEditorDialogController> mChannelEditorDialogControllerProvider, Provider<INotificationManager> mINotificationManagerProvider, Provider<FalsingManager> mFalsingManagerProvider) {
        Dependency instance = new Dependency();
        Dependency_MembersInjector.injectMActivityStarter(instance, DoubleCheck.lazy(mActivityStarterProvider));
        Dependency_MembersInjector.injectMActivityStarterDelegate(instance, DoubleCheck.lazy(mActivityStarterDelegateProvider));
        Dependency_MembersInjector.injectMAsyncSensorManager(instance, DoubleCheck.lazy(mAsyncSensorManagerProvider));
        Dependency_MembersInjector.injectMBluetoothController(instance, DoubleCheck.lazy(mBluetoothControllerProvider));
        Dependency_MembersInjector.injectMLocationController(instance, DoubleCheck.lazy(mLocationControllerProvider));
        Dependency_MembersInjector.injectMRotationLockController(instance, DoubleCheck.lazy(mRotationLockControllerProvider));
        Dependency_MembersInjector.injectMNetworkController(instance, DoubleCheck.lazy(mNetworkControllerProvider));
        Dependency_MembersInjector.injectMZenModeController(instance, DoubleCheck.lazy(mZenModeControllerProvider));
        Dependency_MembersInjector.injectMHotspotController(instance, DoubleCheck.lazy(mHotspotControllerProvider));
        Dependency_MembersInjector.injectMCastController(instance, DoubleCheck.lazy(mCastControllerProvider));
        Dependency_MembersInjector.injectMFlashlightController(instance, DoubleCheck.lazy(mFlashlightControllerProvider));
        Dependency_MembersInjector.injectMUserSwitcherController(instance, DoubleCheck.lazy(mUserSwitcherControllerProvider));
        Dependency_MembersInjector.injectMUserInfoController(instance, DoubleCheck.lazy(mUserInfoControllerProvider));
        Dependency_MembersInjector.injectMKeyguardMonitor(instance, DoubleCheck.lazy(mKeyguardMonitorProvider));
        Dependency_MembersInjector.injectMBatteryController(instance, DoubleCheck.lazy(mBatteryControllerProvider));
        Dependency_MembersInjector.injectMNightDisplayListener(instance, DoubleCheck.lazy(mNightDisplayListenerProvider));
        Dependency_MembersInjector.injectMManagedProfileController(instance, DoubleCheck.lazy(mManagedProfileControllerProvider));
        Dependency_MembersInjector.injectMNextAlarmController(instance, DoubleCheck.lazy(mNextAlarmControllerProvider));
        Dependency_MembersInjector.injectMDataSaverController(instance, DoubleCheck.lazy(mDataSaverControllerProvider));
        Dependency_MembersInjector.injectMAccessibilityController(instance, DoubleCheck.lazy(mAccessibilityControllerProvider));
        Dependency_MembersInjector.injectMDeviceProvisionedController(instance, DoubleCheck.lazy(mDeviceProvisionedControllerProvider));
        Dependency_MembersInjector.injectMPluginManager(instance, DoubleCheck.lazy(mPluginManagerProvider));
        Dependency_MembersInjector.injectMAssistManager(instance, DoubleCheck.lazy(mAssistManagerProvider));
        Dependency_MembersInjector.injectMSecurityController(instance, DoubleCheck.lazy(mSecurityControllerProvider));
        Dependency_MembersInjector.injectMLeakDetector(instance, DoubleCheck.lazy(mLeakDetectorProvider));
        Dependency_MembersInjector.injectMLeakReporter(instance, DoubleCheck.lazy(mLeakReporterProvider));
        Dependency_MembersInjector.injectMGarbageMonitor(instance, DoubleCheck.lazy(mGarbageMonitorProvider));
        Dependency_MembersInjector.injectMTunerService(instance, DoubleCheck.lazy(mTunerServiceProvider));
        Dependency_MembersInjector.injectMStatusBarWindowController(instance, DoubleCheck.lazy(mStatusBarWindowControllerProvider));
        Dependency_MembersInjector.injectMDarkIconDispatcher(instance, DoubleCheck.lazy(mDarkIconDispatcherProvider));
        Dependency_MembersInjector.injectMConfigurationController(instance, DoubleCheck.lazy(mConfigurationControllerProvider));
        Dependency_MembersInjector.injectMStatusBarIconController(instance, DoubleCheck.lazy(mStatusBarIconControllerProvider));
        Dependency_MembersInjector.injectMScreenLifecycle(instance, DoubleCheck.lazy(mScreenLifecycleProvider));
        Dependency_MembersInjector.injectMWakefulnessLifecycle(instance, DoubleCheck.lazy(mWakefulnessLifecycleProvider));
        Dependency_MembersInjector.injectMFragmentService(instance, DoubleCheck.lazy(mFragmentServiceProvider));
        Dependency_MembersInjector.injectMExtensionController(instance, DoubleCheck.lazy(mExtensionControllerProvider));
        Dependency_MembersInjector.injectMPluginDependencyProvider(instance, DoubleCheck.lazy(mPluginDependencyProvider));
        Dependency_MembersInjector.injectMLocalBluetoothManager(instance, DoubleCheck.lazy(mLocalBluetoothManagerProvider));
        Dependency_MembersInjector.injectMVolumeDialogController(instance, DoubleCheck.lazy(mVolumeDialogControllerProvider));
        Dependency_MembersInjector.injectMMetricsLogger(instance, DoubleCheck.lazy(mMetricsLoggerProvider));
        Dependency_MembersInjector.injectMAccessibilityManagerWrapper(instance, DoubleCheck.lazy(mAccessibilityManagerWrapperProvider));
        Dependency_MembersInjector.injectMSysuiColorExtractor(instance, DoubleCheck.lazy(mSysuiColorExtractorProvider));
        Dependency_MembersInjector.injectMTunablePaddingService(instance, DoubleCheck.lazy(mTunablePaddingServiceProvider));
        Dependency_MembersInjector.injectMForegroundServiceController(instance, DoubleCheck.lazy(mForegroundServiceControllerProvider));
        Dependency_MembersInjector.injectMUiOffloadThread(instance, DoubleCheck.lazy(mUiOffloadThreadProvider));
        Dependency_MembersInjector.injectMWarningsUI(instance, DoubleCheck.lazy(mWarningsUIProvider));
        Dependency_MembersInjector.injectMLightBarController(instance, DoubleCheck.lazy(mLightBarControllerProvider));
        Dependency_MembersInjector.injectMIWindowManager(instance, DoubleCheck.lazy(mIWindowManagerProvider));
        Dependency_MembersInjector.injectMOverviewProxyService(instance, DoubleCheck.lazy(mOverviewProxyServiceProvider));
        Dependency_MembersInjector.injectMNavBarModeController(instance, DoubleCheck.lazy(mNavBarModeControllerProvider));
        Dependency_MembersInjector.injectMEnhancedEstimates(instance, DoubleCheck.lazy(mEnhancedEstimatesProvider));
        Dependency_MembersInjector.injectMVibratorHelper(instance, DoubleCheck.lazy(mVibratorHelperProvider));
        Dependency_MembersInjector.injectMIStatusBarService(instance, DoubleCheck.lazy(mIStatusBarServiceProvider));
        Dependency_MembersInjector.injectMDisplayMetrics(instance, DoubleCheck.lazy(mDisplayMetricsProvider));
        Dependency_MembersInjector.injectMLockscreenGestureLogger(instance, DoubleCheck.lazy(mLockscreenGestureLoggerProvider));
        Dependency_MembersInjector.injectMKeyguardEnvironment(instance, DoubleCheck.lazy(mKeyguardEnvironmentProvider));
        Dependency_MembersInjector.injectMShadeController(instance, DoubleCheck.lazy(mShadeControllerProvider));
        Dependency_MembersInjector.injectMNotificationRemoteInputManagerCallback(instance, DoubleCheck.lazy(mNotificationRemoteInputManagerCallbackProvider));
        Dependency_MembersInjector.injectMInitController(instance, DoubleCheck.lazy(mInitControllerProvider));
        Dependency_MembersInjector.injectMAppOpsController(instance, DoubleCheck.lazy(mAppOpsControllerProvider));
        Dependency_MembersInjector.injectMNavigationBarController(instance, DoubleCheck.lazy(mNavigationBarControllerProvider));
        Dependency_MembersInjector.injectMStatusBarStateController(instance, DoubleCheck.lazy(mStatusBarStateControllerProvider));
        Dependency_MembersInjector.injectMNotificationLockscreenUserManager(instance, DoubleCheck.lazy(mNotificationLockscreenUserManagerProvider));
        Dependency_MembersInjector.injectMNotificationGroupAlertTransferHelper(instance, DoubleCheck.lazy(mNotificationGroupAlertTransferHelperProvider));
        Dependency_MembersInjector.injectMNotificationGroupManager(instance, DoubleCheck.lazy(mNotificationGroupManagerProvider));
        Dependency_MembersInjector.injectMVisualStabilityManager(instance, DoubleCheck.lazy(mVisualStabilityManagerProvider));
        Dependency_MembersInjector.injectMNotificationGutsManager(instance, DoubleCheck.lazy(mNotificationGutsManagerProvider));
        Dependency_MembersInjector.injectMNotificationMediaManager(instance, DoubleCheck.lazy(mNotificationMediaManagerProvider));
        Dependency_MembersInjector.injectMNotificationBlockingHelperManager(instance, DoubleCheck.lazy(mNotificationBlockingHelperManagerProvider));
        Dependency_MembersInjector.injectMNotificationRemoteInputManager(instance, DoubleCheck.lazy(mNotificationRemoteInputManagerProvider));
        Dependency_MembersInjector.injectMSmartReplyConstants(instance, DoubleCheck.lazy(mSmartReplyConstantsProvider));
        Dependency_MembersInjector.injectMNotificationListener(instance, DoubleCheck.lazy(mNotificationListenerProvider));
        Dependency_MembersInjector.injectMNotificationLogger(instance, DoubleCheck.lazy(mNotificationLoggerProvider));
        Dependency_MembersInjector.injectMNotificationViewHierarchyManager(instance, DoubleCheck.lazy(mNotificationViewHierarchyManagerProvider));
        Dependency_MembersInjector.injectMNotificationFilter(instance, DoubleCheck.lazy(mNotificationFilterProvider));
        Dependency_MembersInjector.injectMNotificationInterruptionStateProvider(instance, DoubleCheck.lazy(mNotificationInterruptionStateProvider));
        Dependency_MembersInjector.injectMKeyguardDismissUtil(instance, DoubleCheck.lazy(mKeyguardDismissUtilProvider));
        Dependency_MembersInjector.injectMSmartReplyController(instance, DoubleCheck.lazy(mSmartReplyControllerProvider));
        Dependency_MembersInjector.injectMRemoteInputQuickSettingsDisabler(instance, DoubleCheck.lazy(mRemoteInputQuickSettingsDisablerProvider));
        Dependency_MembersInjector.injectMBubbleController(instance, DoubleCheck.lazy(mBubbleControllerProvider));
        Dependency_MembersInjector.injectMNotificationEntryManager(instance, DoubleCheck.lazy(mNotificationEntryManagerProvider));
        Dependency_MembersInjector.injectMNotificationAlertingManager(instance, DoubleCheck.lazy(mNotificationAlertingManagerProvider));
        Dependency_MembersInjector.injectMSensorPrivacyManager(instance, DoubleCheck.lazy(mSensorPrivacyManagerProvider));
        Dependency_MembersInjector.injectMAutoHideController(instance, DoubleCheck.lazy(mAutoHideControllerProvider));
        Dependency_MembersInjector.injectMForegroundServiceNotificationListener(instance, DoubleCheck.lazy(mForegroundServiceNotificationListenerProvider));
        Dependency_MembersInjector.injectMBgLooper(instance, DoubleCheck.lazy(mBgLooperProvider));
        Dependency_MembersInjector.injectMBgHandler(instance, DoubleCheck.lazy(mBgHandlerProvider));
        Dependency_MembersInjector.injectMMainHandler(instance, DoubleCheck.lazy(mMainHandlerProvider));
        Dependency_MembersInjector.injectMTimeTickHandler(instance, DoubleCheck.lazy(mTimeTickHandlerProvider));
        Dependency_MembersInjector.injectMLeakReportEmail(instance, DoubleCheck.lazy(mLeakReportEmailProvider));
        Dependency_MembersInjector.injectMClockManager(instance, DoubleCheck.lazy(mClockManagerProvider));
        Dependency_MembersInjector.injectMActivityManagerWrapper(instance, DoubleCheck.lazy(mActivityManagerWrapperProvider));
        Dependency_MembersInjector.injectMDevicePolicyManagerWrapper(instance, DoubleCheck.lazy(mDevicePolicyManagerWrapperProvider));
        Dependency_MembersInjector.injectMPackageManagerWrapper(instance, DoubleCheck.lazy(mPackageManagerWrapperProvider));
        Dependency_MembersInjector.injectMSensorPrivacyController(instance, DoubleCheck.lazy(mSensorPrivacyControllerProvider));
        Dependency_MembersInjector.injectMDumpController(instance, DoubleCheck.lazy(mDumpControllerProvider));
        Dependency_MembersInjector.injectMDockManager(instance, DoubleCheck.lazy(mDockManagerProvider));
        Dependency_MembersInjector.injectMChannelEditorDialogController(instance, DoubleCheck.lazy(mChannelEditorDialogControllerProvider));
        Dependency_MembersInjector.injectMINotificationManager(instance, DoubleCheck.lazy(mINotificationManagerProvider));
        Dependency_MembersInjector.injectMFalsingManager(instance, DoubleCheck.lazy(mFalsingManagerProvider));
        return instance;
    }

    public static Dependency_Factory create(Provider<ActivityStarter> mActivityStarterProvider, Provider<ActivityStarterDelegate> mActivityStarterDelegateProvider, Provider<AsyncSensorManager> mAsyncSensorManagerProvider, Provider<BluetoothController> mBluetoothControllerProvider, Provider<LocationController> mLocationControllerProvider, Provider<RotationLockController> mRotationLockControllerProvider, Provider<NetworkController> mNetworkControllerProvider, Provider<ZenModeController> mZenModeControllerProvider, Provider<HotspotController> mHotspotControllerProvider, Provider<CastController> mCastControllerProvider, Provider<FlashlightController> mFlashlightControllerProvider, Provider<UserSwitcherController> mUserSwitcherControllerProvider, Provider<UserInfoController> mUserInfoControllerProvider, Provider<KeyguardMonitor> mKeyguardMonitorProvider, Provider<BatteryController> mBatteryControllerProvider, Provider<NightDisplayListener> mNightDisplayListenerProvider, Provider<ManagedProfileController> mManagedProfileControllerProvider, Provider<NextAlarmController> mNextAlarmControllerProvider, Provider<DataSaverController> mDataSaverControllerProvider, Provider<AccessibilityController> mAccessibilityControllerProvider, Provider<DeviceProvisionedController> mDeviceProvisionedControllerProvider, Provider<PluginManager> mPluginManagerProvider, Provider<AssistManager> mAssistManagerProvider, Provider<SecurityController> mSecurityControllerProvider, Provider<LeakDetector> mLeakDetectorProvider, Provider<LeakReporter> mLeakReporterProvider, Provider<GarbageMonitor> mGarbageMonitorProvider, Provider<TunerService> mTunerServiceProvider, Provider<StatusBarWindowController> mStatusBarWindowControllerProvider, Provider<DarkIconDispatcher> mDarkIconDispatcherProvider, Provider<ConfigurationController> mConfigurationControllerProvider, Provider<StatusBarIconController> mStatusBarIconControllerProvider, Provider<ScreenLifecycle> mScreenLifecycleProvider, Provider<WakefulnessLifecycle> mWakefulnessLifecycleProvider, Provider<FragmentService> mFragmentServiceProvider, Provider<ExtensionController> mExtensionControllerProvider, Provider<PluginDependencyProvider> mPluginDependencyProvider, Provider<LocalBluetoothManager> mLocalBluetoothManagerProvider, Provider<VolumeDialogController> mVolumeDialogControllerProvider, Provider<MetricsLogger> mMetricsLoggerProvider, Provider<AccessibilityManagerWrapper> mAccessibilityManagerWrapperProvider, Provider<SysuiColorExtractor> mSysuiColorExtractorProvider, Provider<TunablePadding.TunablePaddingService> mTunablePaddingServiceProvider, Provider<ForegroundServiceController> mForegroundServiceControllerProvider, Provider<UiOffloadThread> mUiOffloadThreadProvider, Provider<PowerUI.WarningsUI> mWarningsUIProvider, Provider<LightBarController> mLightBarControllerProvider, Provider<IWindowManager> mIWindowManagerProvider, Provider<OverviewProxyService> mOverviewProxyServiceProvider, Provider<NavigationModeController> mNavBarModeControllerProvider, Provider<EnhancedEstimates> mEnhancedEstimatesProvider, Provider<VibratorHelper> mVibratorHelperProvider, Provider<IStatusBarService> mIStatusBarServiceProvider, Provider<DisplayMetrics> mDisplayMetricsProvider, Provider<LockscreenGestureLogger> mLockscreenGestureLoggerProvider, Provider<NotificationData.KeyguardEnvironment> mKeyguardEnvironmentProvider, Provider<ShadeController> mShadeControllerProvider, Provider<NotificationRemoteInputManager.Callback> mNotificationRemoteInputManagerCallbackProvider, Provider<InitController> mInitControllerProvider, Provider<AppOpsController> mAppOpsControllerProvider, Provider<NavigationBarController> mNavigationBarControllerProvider, Provider<StatusBarStateController> mStatusBarStateControllerProvider, Provider<NotificationLockscreenUserManager> mNotificationLockscreenUserManagerProvider, Provider<NotificationGroupAlertTransferHelper> mNotificationGroupAlertTransferHelperProvider, Provider<NotificationGroupManager> mNotificationGroupManagerProvider, Provider<VisualStabilityManager> mVisualStabilityManagerProvider, Provider<NotificationGutsManager> mNotificationGutsManagerProvider, Provider<NotificationMediaManager> mNotificationMediaManagerProvider, Provider<NotificationBlockingHelperManager> mNotificationBlockingHelperManagerProvider, Provider<NotificationRemoteInputManager> mNotificationRemoteInputManagerProvider, Provider<SmartReplyConstants> mSmartReplyConstantsProvider, Provider<NotificationListener> mNotificationListenerProvider, Provider<NotificationLogger> mNotificationLoggerProvider, Provider<NotificationViewHierarchyManager> mNotificationViewHierarchyManagerProvider, Provider<NotificationFilter> mNotificationFilterProvider, Provider<NotificationInterruptionStateProvider> mNotificationInterruptionStateProvider, Provider<KeyguardDismissUtil> mKeyguardDismissUtilProvider, Provider<SmartReplyController> mSmartReplyControllerProvider, Provider<RemoteInputQuickSettingsDisabler> mRemoteInputQuickSettingsDisablerProvider, Provider<BubbleController> mBubbleControllerProvider, Provider<NotificationEntryManager> mNotificationEntryManagerProvider, Provider<NotificationAlertingManager> mNotificationAlertingManagerProvider, Provider<SensorPrivacyManager> mSensorPrivacyManagerProvider, Provider<AutoHideController> mAutoHideControllerProvider, Provider<ForegroundServiceNotificationListener> mForegroundServiceNotificationListenerProvider, Provider<Looper> mBgLooperProvider, Provider<Handler> mBgHandlerProvider, Provider<Handler> mMainHandlerProvider, Provider<Handler> mTimeTickHandlerProvider, Provider<String> mLeakReportEmailProvider, Provider<ClockManager> mClockManagerProvider, Provider<ActivityManagerWrapper> mActivityManagerWrapperProvider, Provider<DevicePolicyManagerWrapper> mDevicePolicyManagerWrapperProvider, Provider<PackageManagerWrapper> mPackageManagerWrapperProvider, Provider<SensorPrivacyController> mSensorPrivacyControllerProvider, Provider<DumpController> mDumpControllerProvider, Provider<DockManager> mDockManagerProvider, Provider<ChannelEditorDialogController> mChannelEditorDialogControllerProvider, Provider<INotificationManager> mINotificationManagerProvider, Provider<FalsingManager> mFalsingManagerProvider) {
        return new Dependency_Factory(mActivityStarterProvider, mActivityStarterDelegateProvider, mAsyncSensorManagerProvider, mBluetoothControllerProvider, mLocationControllerProvider, mRotationLockControllerProvider, mNetworkControllerProvider, mZenModeControllerProvider, mHotspotControllerProvider, mCastControllerProvider, mFlashlightControllerProvider, mUserSwitcherControllerProvider, mUserInfoControllerProvider, mKeyguardMonitorProvider, mBatteryControllerProvider, mNightDisplayListenerProvider, mManagedProfileControllerProvider, mNextAlarmControllerProvider, mDataSaverControllerProvider, mAccessibilityControllerProvider, mDeviceProvisionedControllerProvider, mPluginManagerProvider, mAssistManagerProvider, mSecurityControllerProvider, mLeakDetectorProvider, mLeakReporterProvider, mGarbageMonitorProvider, mTunerServiceProvider, mStatusBarWindowControllerProvider, mDarkIconDispatcherProvider, mConfigurationControllerProvider, mStatusBarIconControllerProvider, mScreenLifecycleProvider, mWakefulnessLifecycleProvider, mFragmentServiceProvider, mExtensionControllerProvider, mPluginDependencyProvider, mLocalBluetoothManagerProvider, mVolumeDialogControllerProvider, mMetricsLoggerProvider, mAccessibilityManagerWrapperProvider, mSysuiColorExtractorProvider, mTunablePaddingServiceProvider, mForegroundServiceControllerProvider, mUiOffloadThreadProvider, mWarningsUIProvider, mLightBarControllerProvider, mIWindowManagerProvider, mOverviewProxyServiceProvider, mNavBarModeControllerProvider, mEnhancedEstimatesProvider, mVibratorHelperProvider, mIStatusBarServiceProvider, mDisplayMetricsProvider, mLockscreenGestureLoggerProvider, mKeyguardEnvironmentProvider, mShadeControllerProvider, mNotificationRemoteInputManagerCallbackProvider, mInitControllerProvider, mAppOpsControllerProvider, mNavigationBarControllerProvider, mStatusBarStateControllerProvider, mNotificationLockscreenUserManagerProvider, mNotificationGroupAlertTransferHelperProvider, mNotificationGroupManagerProvider, mVisualStabilityManagerProvider, mNotificationGutsManagerProvider, mNotificationMediaManagerProvider, mNotificationBlockingHelperManagerProvider, mNotificationRemoteInputManagerProvider, mSmartReplyConstantsProvider, mNotificationListenerProvider, mNotificationLoggerProvider, mNotificationViewHierarchyManagerProvider, mNotificationFilterProvider, mNotificationInterruptionStateProvider, mKeyguardDismissUtilProvider, mSmartReplyControllerProvider, mRemoteInputQuickSettingsDisablerProvider, mBubbleControllerProvider, mNotificationEntryManagerProvider, mNotificationAlertingManagerProvider, mSensorPrivacyManagerProvider, mAutoHideControllerProvider, mForegroundServiceNotificationListenerProvider, mBgLooperProvider, mBgHandlerProvider, mMainHandlerProvider, mTimeTickHandlerProvider, mLeakReportEmailProvider, mClockManagerProvider, mActivityManagerWrapperProvider, mDevicePolicyManagerWrapperProvider, mPackageManagerWrapperProvider, mSensorPrivacyControllerProvider, mDumpControllerProvider, mDockManagerProvider, mChannelEditorDialogControllerProvider, mINotificationManagerProvider, mFalsingManagerProvider);
    }

    public static Dependency newDependency() {
        return new Dependency();
    }
}
